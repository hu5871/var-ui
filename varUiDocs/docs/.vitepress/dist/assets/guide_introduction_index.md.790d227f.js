import{_ as e,o as a,c as t,a as r}from"./app.44d9576a.js";const n="/assets/var-logo.3506b0ef.png",m=JSON.parse('{"title":"介绍","description":"","frontmatter":{"title":"介绍"},"headers":[{"level":2,"title":"设计","slug":"设计","link":"#设计","children":[{"level":3,"title":"版权","slug":"版权","link":"#版权","children":[]}]}],"relativePath":"guide/introduction/index.md","lastUpdated":1689232209000}'),i={name:"guide/introduction/index.md"},s=r('<p><img src="'+n+'" alt="var"></p><h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-hidden="true">#</a></h1><p>组件库的取名为 <strong>var</strong> ，首先它代表了一个程序生命的开始，同时也代表着前端三大框架 <strong>Vue</strong>、<strong>Angular</strong>、<strong>React</strong> 带来前端体系的快速发展，一次偶然的体验和谈论我尝试着开发一个组件库，尝试带来更多轻松使用、更高的用户体验、更少硬编码，通过不断体验主流 app 去开发出更好的组件,也希望有更多的开发者来参与维护，共同推动var-ui的进程。</p><h2 id="设计" tabindex="-1">设计 <a class="header-anchor" href="#设计" aria-hidden="true">#</a></h2><p>首先<strong>var-ui</strong>整个组件库的设计理念是：</p><ul><li><p>原子化css</p><p>为什么不采用bem规范来设计组件的样式，因为原子化可以更好为开发者提供功能类、更直观的视觉效果命名、小程序端有包大小显示不需要过多的引入样式表、不限制开发者使用的css 预处理器，但是原子化并不利于使用者更改样式，所以我提供了bem规范的class,它只有一个作用：为开发者提供修改样式。</p></li><li><p>组件的设计</p><p>默认为大部分组件margin(外边距)、padding(内边距)、round(圆角)、background、border等等常用样式提供props，单位亦可自定义，尽可能少的让开发者因为一点小问题就编写行内样式。</p><p>优化部分主流app相识的组件却无交互的问题</p></li><li><p>封装输入常用的api</p><p>提供丰富、可靠的工具方法，让你的逻辑更加清晰</p></li><li><p>兼容问题</p><p>目前测试 h5、微信小程序、app，暂不支持nvue</p></li></ul><h3 id="版权" tabindex="-1">版权 <a class="header-anchor" href="#版权" aria-hidden="true">#</a></h3><p>免费且可商用</p>',8),p=[s];function o(d,l,c,_,h,u){return a(),t("div",null,p)}const f=e(i,[["render",o]]);export{m as __pageData,f as default};
