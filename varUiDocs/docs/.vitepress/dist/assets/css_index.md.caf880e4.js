import{_ as t,o as e,c as d,a as r}from"./app.08cfbb32.js";const _=JSON.parse('{"title":"css","description":"","frontmatter":{},"headers":[{"level":3,"title":"flex","slug":"flex","link":"#flex","children":[]},{"level":3,"title":"justify-content","slug":"justify-content","link":"#justify-content","children":[]},{"level":3,"title":"align-items","slug":"align-items","link":"#align-items","children":[]},{"level":3,"title":"align-content","slug":"align-content","link":"#align-content","children":[]},{"level":3,"title":"align-self","slug":"align-self","link":"#align-self","children":[]},{"level":3,"title":"flex-direction","slug":"flex-direction","link":"#flex-direction","children":[]},{"level":3,"title":"flex-wrap","slug":"flex-wrap","link":"#flex-wrap","children":[]}],"relativePath":"css/index.md","lastUpdated":1690801272000}'),a={name:"css/index.md"},l=r('<h1 id="css" tabindex="-1">css <a class="header-anchor" href="#css" aria-hidden="true">#</a></h1><p>简单实用的功能类css,大部分写法跟 Tailwind CSS一样</p><h3 id="flex" tabindex="-1">flex <a class="header-anchor" href="#flex" aria-hidden="true">#</a></h3><div class="vp-table__container"><table><thead><tr><th>类名</th><th>描述</th></tr></thead><tbody><tr><td>flex</td><td>flex布局</td></tr></tbody></table></div><h3 id="justify-content" tabindex="-1">justify-content <a class="header-anchor" href="#justify-content" aria-hidden="true">#</a></h3><p>用于设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式。</p><div class="vp-table__container"><table><thead><tr><th>类名</th><th>描述</th></tr></thead><tbody><tr><td>justify-start</td><td><em>从行首起始位置开始排列</em></td></tr><tr><td>justify-center</td><td><em>居中排列</em></td></tr><tr><td>justify-end</td><td><em>从行尾位置开始排列</em></td></tr><tr><td>justify-between</td><td>均匀排列每个元素，首个元素放置于起点，末尾元素放置于终点</td></tr><tr><td>justify-around</td><td>均匀排列每个元素，每个元素周围分配相同的空间</td></tr><tr><td>justify-evenly</td><td>均匀排列每个元素，每个元素之间的间隔相等</td></tr></tbody></table></div><h3 id="align-items" tabindex="-1">align-items <a class="header-anchor" href="#align-items" aria-hidden="true">#</a></h3><p>定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。</p><div class="vp-table__container"><table><thead><tr><th>类名</th><th>描述</th></tr></thead><tbody><tr><td>items-start</td><td>元素位于容器的开头，弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。</td></tr><tr><td>items-center</td><td>元素位于容器的中心，弹性盒子元素在该行的侧轴（纵轴）上居中放置。</td></tr><tr><td>items-end</td><td>元素位于容器的结尾，弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。</td></tr><tr><td>items-baseline</td><td>元素位于容器的基线上，如弹性盒子元素的行内轴与侧轴为同一条，则该值与&#39;flex-start&#39;等效。其它情况下，该值将参与基线对齐。</td></tr><tr><td>items-stretch</td><td>默认值。元素被拉伸以适应容器。如果指定侧轴大小的属性值为&#39;auto&#39;，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照&#39;min/max-width/height&#39;属性的限制。</td></tr></tbody></table></div><h3 id="align-content" tabindex="-1">align-content <a class="header-anchor" href="#align-content" aria-hidden="true">#</a></h3><p>在弹性容器内的各项没有占用交叉轴上所有可用的空间时对齐容器内的各项（垂直）。</p><div class="vp-table__container"><table><thead><tr><th>类名</th><th>描述</th></tr></thead><tbody><tr><td><em>content-start</em></td><td>位于容器的开头。</td></tr><tr><td><em>content-center</em></td><td>元素位于容器的中心。</td></tr><tr><td>content-end</td><td>位于容器的结尾。</td></tr><tr><td>content-between</td><td>位于各行之间留有空白的容器内。</td></tr><tr><td><em>content-around</em></td><td>位于各行之前、之间、之后都留有空白的容器内。</td></tr></tbody></table></div><h3 id="align-self" tabindex="-1">align-self <a class="header-anchor" href="#align-self" aria-hidden="true">#</a></h3><p>居中对齐弹性对象元素内的某个项</p><div class="vp-table__container"><table><thead><tr><th>类名</th><th>描述</th></tr></thead><tbody><tr><td>self-auto</td><td>默认值。元素继承了它的父容器的 align-items 属性。如果没有父容器则为 &quot;stretch&quot;。</td></tr><tr><td>self-start</td><td>元素位于容器的开头。</td></tr><tr><td>self-end</td><td>位于容器的结尾。</td></tr><tr><td>self-center</td><td>元素位于容器的中心。</td></tr><tr><td>self-stretch</td><td>元素被拉伸以适应容器。</td></tr><tr><td>self-baseline</td><td>元素位于容器的基线上。</td></tr></tbody></table></div><h3 id="flex-direction" tabindex="-1">flex-direction <a class="header-anchor" href="#flex-direction" aria-hidden="true">#</a></h3><div class="vp-table__container"><table><thead><tr><th>类名</th><th>描述</th></tr></thead><tbody><tr><td>flex-row</td><td>水平显示</td></tr><tr><td>flex-row-reverse</td><td>水平显示，顺序相反</td></tr><tr><td>flex-col</td><td>垂直显示</td></tr><tr><td>flex-col-reverse</td><td>垂直显示，顺序相反</td></tr></tbody></table></div><h3 id="flex-wrap" tabindex="-1">flex-wrap <a class="header-anchor" href="#flex-wrap" aria-hidden="true">#</a></h3><div class="vp-table__container"><table><thead><tr><th>类名</th><th>描述</th></tr></thead><tbody><tr><td>flex-wrap</td><td>规定灵活的项目在必要的时候拆行或拆列。</td></tr><tr><td>flex-wrap-reverse</td><td>规定灵活的项目在必要的时候拆行或拆列，但是以相反的顺序。</td></tr><tr><td>flex-nowrap</td><td>不换行</td></tr></tbody></table></div>',20),i=[l];function n(s,h,c,o,f,b){return e(),d("div",null,i)}const p=t(a,[["render",n]]);export{_ as __pageData,p as default};
